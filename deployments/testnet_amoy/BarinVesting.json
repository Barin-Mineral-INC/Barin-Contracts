{
  "address": "0xD9430D582A967c84b0DeB7a711B222534a600141",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CliffLongerThanDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSchedule",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotBeneficiary",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToRelease",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ScheduleNotRevocable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Underflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "scheduleId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "scheduleId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unvested",
          "type": "uint256"
        }
      ],
      "name": "VestingRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "scheduleId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VestingScheduleCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "cliffDurations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "vestingDurations",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "revocables",
          "type": "bool[]"
        }
      ],
      "name": "batchCreateSchedules",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "scheduleIds",
          "type": "bytes32[]"
        }
      ],
      "name": "batchRelease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cliffDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingDuration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "revocable",
          "type": "bool"
        }
      ],
      "name": "createVestingSchedule",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "scheduleId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getBeneficiarySchedules",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "scheduleId",
          "type": "bytes32"
        }
      ],
      "name": "getSchedule",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawnAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            }
          ],
          "internalType": "struct BarinVesting.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "scheduleId",
          "type": "bytes32"
        }
      ],
      "name": "releasableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "scheduleId",
          "type": "bytes32"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "scheduleId",
          "type": "bytes32"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "scheduleId",
          "type": "bytes32"
        }
      ],
      "name": "vestedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb38ca574711cd27d88d41ebca93fc9d4a960c03e7175fe0fed9507501280050",
  "receipt": {
    "to": null,
    "from": "0xF1aA658bC81048Cf0cb83B1f056A4f21f1bCc6bD",
    "contractAddress": "0xD9430D582A967c84b0DeB7a711B222534a600141",
    "transactionIndex": 1,
    "gasUsed": "1109389",
    "logsBloom": "0x
    "blockHash": "0x686015d48a9357b2572c80fd78fd03c0c91f6c7ddf6c1b3b873a21e404d78d57",
    "transactionHash": "0xdb38ca574711cd27d88d41ebca93fc9d4a960c03e7175fe0fed9507501280050",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 25642624,
        "transactionHash": "0xdb38ca574711cd27d88d41ebca93fc9d4a960c03e7175fe0fed9507501280050",
        "address": "0xD9430D582A967c84b0DeB7a711B222534a600141",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f1aa658bc81048cf0cb83b1f056a4f21f1bcc6bd"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x686015d48a9357b2572c80fd78fd03c0c91f6c7ddf6c1b3b873a21e404d78d57"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 25642624,
        "transactionHash": "0xdb38ca574711cd27d88d41ebca93fc9d4a960c03e7175fe0fed9507501280050",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1aa658bc81048cf0cb83b1f056a4f21f1bcc6bd",
          "0x00000000000000000000000085ebd6dc97d56f62e371382b38eae91f3bb4ecb2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001ac88bfc11a06000000000000000000000000000000000000000000000000000cd7f7c9e9d9e0800000000000000000000000000000000000000000000001b47f8a85e2aa9261d10000000000000000000000000000000000000000000000000b2b6f0a28bfda800000000000000000000000000000000000000000000001b481370ea26bac67d1",
        "logIndex": 3,
        "blockHash": "0x686015d48a9357b2572c80fd78fd03c0c91f6c7ddf6c1b3b873a21e404d78d57"
      }
    ],
    "blockNumber": 25642624,
    "cumulativeGasUsed": "1226980",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2F073929304da0f5290eCd6e434038ECE77b54ec"
  ],
  "numDeployments": 1,
  "solcInputHash": "6d0131a47e4ff3e1a7d88e86f0351fdd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CliffLongerThanDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSchedule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBeneficiary\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToRelease\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ScheduleNotRevocable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Underflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"scheduleId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"scheduleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unvested\",\"type\":\"uint256\"}],\"name\":\"VestingRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"scheduleId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cliffDurations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vestingDurations\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"revocables\",\"type\":\"bool[]\"}],\"name\":\"batchCreateSchedules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"scheduleIds\",\"type\":\"bytes32[]\"}],\"name\":\"batchRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"createVestingSchedule\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"scheduleId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getBeneficiarySchedules\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"scheduleId\",\"type\":\"bytes32\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"internalType\":\"struct BarinVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"scheduleId\",\"type\":\"bytes32\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"scheduleId\",\"type\":\"bytes32\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"scheduleId\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"scheduleId\",\"type\":\"bytes32\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"MerkleX\",\"details\":\"Uses OpenZeppelin\\u2019s Ownable and ReentrancyGuard.       Schedules are created with a cliff period, total duration, linear vesting, and optional revocability.      Beneficiaries can claim vested tokens, and owner can revoke unvested portions if allowed.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"batchCreateSchedules(address[],uint256[],uint256[],uint256[],bool[])\":{\"details\":\"Batch create multiple vesting schedules (gas efficient)\"},\"batchRelease(bytes32[])\":{\"details\":\"Batch release for multiple schedules\"},\"createVestingSchedule(address,uint256,uint256,uint256,bool)\":{\"details\":\"Creates a new vesting schedule\",\"params\":{\"beneficiary\":\"Address of the beneficiary\",\"cliffDuration\":\"Cliff period in seconds\",\"revocable\":\"Whether the schedule can be revoked\",\"totalAmount\":\"Total amount to be vested\",\"vestingDuration\":\"Total vesting duration in seconds\"}},\"emergencyWithdraw(address,uint256)\":{\"details\":\"Emergency function to recover accidentally sent tokens\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"release(bytes32)\":{\"details\":\"Release vested tokens for a specific schedule\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revoke(bytes32)\":{\"details\":\"Revoke a vesting schedule (if revocable)\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Barin Vesting Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Manages multiple vesting schedules for BARIN token allocations across team, marketing, liquidity, and other categories.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BarinVesting.sol\":\"BarinVesting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/BarinVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Barin Vesting Contract\\n * @author MerkleX\\n * @notice Manages multiple vesting schedules for BARIN token allocations across team, marketing, liquidity, and other categories.\\n * @dev Uses OpenZeppelin\\u2019s Ownable and ReentrancyGuard. \\n *      Schedules are created with a cliff period, total duration, linear vesting, and optional revocability.\\n *      Beneficiaries can claim vested tokens, and owner can revoke unvested portions if allowed.\\n */\\n\\ncontract BarinVesting is Ownable(msg.sender), ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct VestingSchedule {\\n        uint256 totalAmount;\\n        uint256 cliffDuration;     // in seconds\\n        uint256 vestingDuration;   // in seconds\\n        uint256 startTime;\\n        uint256 withdrawnAmount;\\n        address beneficiary;\\n        bool revocable;\\n    }\\n\\n    IERC20 public immutable token;\\n    // uint256 public immutable vestingStart;\\n\\n    // track how many tokens are fully allocated vs. how many have been released\\n    uint256 private _totalAllocated;\\n    uint256 private _totalReleased;\\n\\n    // simple nonce to avoid duplicate IDs\\n    uint256 private _nonce;\\n\\n    mapping(bytes32 => VestingSchedule) private _schedules;\\n    mapping(address => bytes32[]) private _beneficiarySchedules;\\n\\n    event VestingScheduleCreated(bytes32 indexed scheduleId, address indexed beneficiary, uint256 amount);\\n    event TokensReleased(bytes32 indexed scheduleId, address indexed beneficiary, uint256 amount);\\n    event VestingRevoked(bytes32 indexed scheduleId, uint256 unvested);\\n    event EmergencyWithdraw(address indexed tokenAddress, uint256 amount);\\n\\n    error InvalidSchedule();\\n    error CliffLongerThanDuration();\\n    error NothingToRelease();\\n    error NotBeneficiary();\\n    error ScheduleNotRevocable();\\n    error InsufficientBalance();\\n    error Underflow();\\n\\n    constructor(address _token) {\\n        if (_token == address(0)) revert InvalidSchedule();\\n        token = IERC20(_token);\\n        // vestingStart = _vestingStart > 0 ? _vestingStart : block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Creates a new vesting schedule\\n     * @param beneficiary Address of the beneficiary\\n     * @param totalAmount Total amount to be vested\\n     * @param cliffDuration Cliff period in seconds\\n     * @param vestingDuration Total vesting duration in seconds\\n     * @param revocable Whether the schedule can be revoked\\n     */\\n    function createVestingSchedule(\\n        address beneficiary,\\n        uint256 totalAmount,\\n        uint256 cliffDuration,\\n        uint256 vestingDuration,\\n        bool revocable\\n    ) external onlyOwner returns (bytes32 scheduleId) {\\n        return _createVestingSchedule(beneficiary, totalAmount, cliffDuration, vestingDuration, revocable);\\n    }\\n\\n    /**\\n     * @dev Batch create multiple vesting schedules (gas efficient)\\n     */\\n    function batchCreateSchedules(\\n        address[] calldata beneficiaries,\\n        uint256[] calldata amounts,\\n        uint256[] calldata cliffDurations,\\n        uint256[] calldata vestingDurations,\\n        bool[] calldata revocables\\n    ) external onlyOwner {\\n        uint256 length = beneficiaries.length;\\n        if (\\n            length != amounts.length ||\\n            length != cliffDurations.length ||\\n            length != vestingDurations.length ||\\n            length != revocables.length\\n        ) {\\n            revert InvalidSchedule();\\n        }\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _createVestingSchedule(\\n                beneficiaries[i],\\n                amounts[i],\\n                cliffDurations[i],\\n                vestingDurations[i],\\n                revocables[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create vesting schedule\\n     */\\n    function _createVestingSchedule(\\n        address beneficiary,\\n        uint256 totalAmount,\\n        uint256 cliffDuration,\\n        uint256 vestingDuration,\\n        bool revocable\\n    ) internal returns (bytes32 scheduleId) {\\n        if (beneficiary == address(0) || totalAmount == 0 || vestingDuration == 0) {\\n            revert InvalidSchedule();\\n        }\\n        if (cliffDuration > vestingDuration) {\\n            revert CliffLongerThanDuration();\\n        }\\n\\n        // compute how many tokens are already \\u201cowed\\u201d by existing schedules\\n        uint256 owed = _totalAllocated - _totalReleased;\\n        uint256 available = token.balanceOf(address(this)) - owed;\\n        if (available < totalAmount) {\\n            revert InsufficientBalance();\\n        }\\n\\n        _totalAllocated += totalAmount;\\n\\n        // include a nonce to avoid duplicate IDs in the same block\\n        scheduleId = keccak256(\\n            abi.encodePacked(beneficiary, block.timestamp, totalAmount, _nonce++)\\n        );\\n\\n        _schedules[scheduleId] = VestingSchedule({\\n            totalAmount: totalAmount,\\n            cliffDuration: cliffDuration,\\n            vestingDuration: vestingDuration,\\n            startTime: block.timestamp,\\n            withdrawnAmount: 0,\\n            beneficiary: beneficiary,\\n            revocable: revocable\\n        });\\n\\n        _beneficiarySchedules[beneficiary].push(scheduleId);\\n\\n        emit VestingScheduleCreated(scheduleId, beneficiary, totalAmount);\\n    }\\n\\n    /**\\n     * @dev Release vested tokens for a specific schedule\\n     */\\n    function release(bytes32 scheduleId) public nonReentrant {\\n        VestingSchedule storage schedule = _schedules[scheduleId];\\n\\n        if (schedule.beneficiary != msg.sender && msg.sender != owner()) {\\n            revert NotBeneficiary();\\n        }\\n\\n        uint256 vested = _vestedAmount(scheduleId);\\n        uint256 withdrawn = schedule.withdrawnAmount;\\n        if (vested < withdrawn) {\\n            revert Underflow();\\n        }\\n\\n        uint256 releasable = vested - withdrawn;\\n        if (releasable == 0) {\\n            revert NothingToRelease();\\n        }\\n\\n        schedule.withdrawnAmount = withdrawn + releasable;\\n        _totalReleased += releasable;\\n\\n        token.safeTransfer(schedule.beneficiary, releasable);\\n\\n        emit TokensReleased(scheduleId, schedule.beneficiary, releasable);\\n    }\\n\\n    /**\\n     * @dev Batch release for multiple schedules\\n     */\\n    function batchRelease(bytes32[] calldata scheduleIds) external {\\n        for (uint256 i = 0; i < scheduleIds.length; i++) {\\n            bytes32 sid = scheduleIds[i];\\n            uint256 vested = _vestedAmount(sid);\\n            uint256 withdrawn = _schedules[sid].withdrawnAmount;\\n            if (vested > withdrawn) {\\n                release(sid);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Revoke a vesting schedule (if revocable)\\n     */\\n    function revoke(bytes32 scheduleId) external onlyOwner {\\n        VestingSchedule storage schedule = _schedules[scheduleId];\\n\\n        if (!schedule.revocable) {\\n            revert ScheduleNotRevocable();\\n        }\\n\\n        uint256 vested = _vestedAmount(scheduleId);\\n        uint256 unvestedAmount = schedule.totalAmount - vested;\\n\\n        schedule.totalAmount = vested;\\n        schedule.revocable = false;\\n        \\n        // Adjust total allocated\\n        _totalAllocated -= unvestedAmount;\\n\\n        if (unvestedAmount > 0) {\\n            token.safeTransfer(owner(), unvestedAmount);\\n            emit VestingRevoked(scheduleId, unvestedAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate releasable amount for a schedule\\n     */\\n    function _releasableAmount(bytes32 scheduleId) private view returns (uint256) {\\n        uint256 vested = _vestedAmount(scheduleId);\\n        uint256 withdrawn = _schedules[scheduleId].withdrawnAmount;\\n        return vested > withdrawn ? (vested - withdrawn) : 0;\\n    }\\n\\n    /**\\n     * @dev Calculate vested amount for a schedule\\n     */\\n    function _vestedAmount(bytes32 scheduleId) private view returns (uint256) {\\n        VestingSchedule memory schedule = _schedules[scheduleId];\\n        if (schedule.beneficiary == address(0)) return 0;\\n\\n        uint256 elapsed = block.timestamp - schedule.startTime;\\n        if (elapsed < schedule.cliffDuration) {\\n            return 0;\\n        }\\n        if (elapsed >= schedule.vestingDuration) {\\n            return schedule.totalAmount;\\n        }\\n        return (schedule.totalAmount * elapsed) / schedule.vestingDuration;\\n    }\\n\\n    // View functions\\n    function getSchedule(bytes32 scheduleId) external view returns (VestingSchedule memory) {\\n        return _schedules[scheduleId];\\n    }\\n\\n    function releasableAmount(bytes32 scheduleId) external view returns (uint256) {\\n        return _releasableAmount(scheduleId);\\n    }\\n\\n    function vestedAmount(bytes32 scheduleId) external view returns (uint256) {\\n        return _vestedAmount(scheduleId);\\n    }\\n\\n    function getBeneficiarySchedules(address beneficiary) external view returns (bytes32[] memory) {\\n        return _beneficiarySchedules[beneficiary];\\n    }\\n\\n    /**\\n     * @dev Emergency function to recover accidentally sent tokens\\n     */\\n    function emergencyWithdraw(address tokenAddress, uint256 amount) external onlyOwner {\\n        IERC20(tokenAddress).safeTransfer(owner(), amount);\\n        emit EmergencyWithdraw(tokenAddress, amount);\\n    }\\n}\",\"keccak256\":\"0x9d8adf1f0c84cdda1a23c22a799a7d52b8cd00a871e6e990297d342a7d9eac81\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161137f38038061137f83398101604081905261002f916100eb565b338061005557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005e8161009b565b50600180556001600160a01b03811661008a57604051631b742d9d60e31b815260040160405180910390fd5b6001600160a01b031660805261011b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100fd57600080fd5b81516001600160a01b038116811461011457600080fd5b9392505050565b60805161123461014b6000396000818161025d01528181610488015281816107c1015261099401526112346000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638fdd511e1161008c578063b75c7dc611610066578063b75c7dc614610232578063f2fde38b14610245578063fc0c546a14610258578063fc6cb0951461027f57600080fd5b80638fdd511e146101ec57806395ccea671461020c578063ae967f431461021f57600080fd5b80633adc277a116100c85780633adc277a1461013b57806367d42a8b146101aa578063715018a6146101bf5780638da5cb5b146101c757600080fd5b80630f19734f146100ef578063209535e51461011557806333bf5cf214610128575b600080fd5b6101026100fd366004610e95565b610292565b6040519081526020015b60405180910390f35b610102610123366004610ee5565b6102b3565b610102610136366004610ee5565b6102c4565b61014e610149366004610ee5565b6102cf565b60405161010c9190815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301516001600160a01b03169082015260c09182015115159181019190915260e00190565b6101bd6101b8366004610ee5565b61038b565b005b6101bd610507565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161010c565b6101ff6101fa366004610efe565b61051b565b60405161010c9190610f20565b6101bd61021a366004610f63565b610587565b6101bd61022d366004610fd9565b6105fc565b6101bd610240366004610ee5565b61070b565b6101bd610253366004610efe565b610829565b6101d47f000000000000000000000000000000000000000000000000000000000000000081565b6101bd61028d3660046110e4565b610869565b600061029c6108d2565b6102a986868686866108ff565b9695505050505050565b60006102be82610c15565b92915050565b60006102be82610cf3565b61031a6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b50600090815260056020818152604092839020835160e0810185528154815260018201549281019290925260028101549382019390935260038301546060820152600483015460808201529101546001600160a01b03811660a0830152600160a01b900460ff16151560c082015290565b610393610d2c565b6000818152600560208190526040909120908101546001600160a01b031633148015906103cb57506000546001600160a01b03163314155b156103e95760405163644d871f60e01b815260040160405180910390fd5b60006103f483610c15565b60048301549091508082101561041d5760405163caccb6d960e01b815260040160405180910390fd5b6000610429828461113c565b90508060000361044c5760405163b10205ed60e01b815260040160405180910390fd5b610456818361114f565b84600401819055508060036000828254610470919061114f565b909155505060058401546104b1906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683610d56565b60058401546040518281526001600160a01b039091169086907f62eb4bd96d9a7a66875a9f46f9f9d8bf6cfed3fe0578671b752301427d2a4f669060200160405180910390a35050505061050460018055565b50565b61050f6108d2565b6105196000610da8565b565b6001600160a01b03811660009081526006602090815260409182902080548351818402810184019094528084526060939283018282801561057b57602002820191906000526020600020905b815481526020019060010190808311610567575b50505050509050919050565b61058f6108d2565b6105b56105a46000546001600160a01b031690565b6001600160a01b0384169083610d56565b816001600160a01b03167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695826040516105f091815260200190565b60405180910390a25050565b6106046108d2565b8887811415806106145750808614155b8061061f5750808414155b8061062a5750808214155b1561064857604051631b742d9d60e31b815260040160405180910390fd5b60005b818110156106fd576106f48c8c8381811061066857610668611162565b905060200201602081019061067d9190610efe565b8b8b8481811061068f5761068f611162565b905060200201358a8a858181106106a8576106a8611162565b905060200201358989868181106106c1576106c1611162565b905060200201358888878181106106da576106da611162565b90506020020160208101906106ef9190611178565b6108ff565b5060010161064b565b505050505050505050505050565b6107136108d2565b600081815260056020819052604090912090810154600160a01b900460ff1661074f57604051630e6a74e160e11b815260040160405180910390fd5b600061075a83610c15565b9050600081836000015461076e919061113c565b82845560058401805460ff60a01b1916905560028054919250829160009061079790849061113c565b90915550508015610823576107e86107b76000546001600160a01b031690565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083610d56565b837fd76e6ddeb66c11426afbadb0c7e5cb4ef26e8dfe8043b119d95879df37d9b8e88260405161081a91815260200190565b60405180910390a25b50505050565b6108316108d2565b6001600160a01b03811661086057604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61050481610da8565b60005b818110156108cd57600083838381811061088857610888611162565b905060200201359050600061089c82610c15565b600083815260056020526040902060040154909150808211156108c2576108c28361038b565b50505060010161086c565b505050565b6000546001600160a01b031633146105195760405163118cdaa760e01b8152336004820152602401610857565b60006001600160a01b0386161580610915575084155b8061091e575082155b1561093c57604051631b742d9d60e31b815260040160405180910390fd5b8284111561095d57604051630668575b60e01b815260040160405180910390fd5b600060035460025461096f919061113c565b6040516370a0823160e01b815230600482015290915060009082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156109db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff9190611193565b610a09919061113c565b905086811015610a2c57604051631e9acf1760e31b815260040160405180910390fd5b8660026000828254610a3e919061114f565b909155505060048054899142918a916000610a58836111ac565b9091555060405160609490941b6bffffffffffffffffffffffff191660208501526034840192909252605483015260748201526094016040516020818303038152906040528051906020012092506040518060e0016040528088815260200187815260200186815260200142815260200160008152602001896001600160a01b0316815260200185151581525060056000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160050160146101000a81548160ff02191690831515021790555090505060066000896001600160a01b03166001600160a01b03168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190915055876001600160a01b0316837ff4173b3b3302c4359c3dd6c9d18f24e03d01b04fb8edd7c3519df6ae162ad83989604051610c0291815260200190565b60405180910390a3505095945050505050565b6000818152600560208181526040808420815160e081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152909101546001600160a01b03811660a08301819052600160a01b90910460ff16151560c0830152610c925750600092915050565b6000816060015142610ca4919061113c565b90508160200151811015610cbc575060009392505050565b81604001518110610ccf57505192915050565b60408201518251610ce19083906111c5565b610ceb91906111dc565b949350505050565b600080610cff83610c15565b600084815260056020526040902060040154909150808211610d22576000610ceb565b610ceb818361113c565b600260015403610d4f57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526108cd908490610df8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080602060008451602086016000885af180610e1b576040513d6000823e3d81fd5b50506000513d91508115610e33578060011415610e40565b6001600160a01b0384163b155b1561082357604051635274afe760e01b81526001600160a01b0385166004820152602401610857565b80356001600160a01b0381168114610e8057600080fd5b919050565b80358015158114610e8057600080fd5b600080600080600060a08688031215610ead57600080fd5b610eb686610e69565b9450602086013593506040860135925060608601359150610ed960808701610e85565b90509295509295909350565b600060208284031215610ef757600080fd5b5035919050565b600060208284031215610f1057600080fd5b610f1982610e69565b9392505050565b602080825282518282018190526000918401906040840190835b81811015610f58578351835260209384019390920191600101610f3a565b509095945050505050565b60008060408385031215610f7657600080fd5b610f7f83610e69565b946020939093013593505050565b60008083601f840112610f9f57600080fd5b50813567ffffffffffffffff811115610fb757600080fd5b6020830191508360208260051b8501011115610fd257600080fd5b9250929050565b60008060008060008060008060008060a08b8d031215610ff857600080fd5b8a3567ffffffffffffffff81111561100f57600080fd5b61101b8d828e01610f8d565b909b5099505060208b013567ffffffffffffffff81111561103b57600080fd5b6110478d828e01610f8d565b90995097505060408b013567ffffffffffffffff81111561106757600080fd5b6110738d828e01610f8d565b90975095505060608b013567ffffffffffffffff81111561109357600080fd5b61109f8d828e01610f8d565b90955093505060808b013567ffffffffffffffff8111156110bf57600080fd5b6110cb8d828e01610f8d565b915080935050809150509295989b9194979a5092959850565b600080602083850312156110f757600080fd5b823567ffffffffffffffff81111561110e57600080fd5b61111a85828601610f8d565b90969095509350505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102be576102be611126565b808201808211156102be576102be611126565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561118a57600080fd5b610f1982610e85565b6000602082840312156111a557600080fd5b5051919050565b6000600182016111be576111be611126565b5060010190565b80820281158282048414176102be576102be611126565b6000826111f957634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212209279cf592c5de8e569c5a4923ba42afc366e8aa4987a42d8cae023c37e18c11b64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638fdd511e1161008c578063b75c7dc611610066578063b75c7dc614610232578063f2fde38b14610245578063fc0c546a14610258578063fc6cb0951461027f57600080fd5b80638fdd511e146101ec57806395ccea671461020c578063ae967f431461021f57600080fd5b80633adc277a116100c85780633adc277a1461013b57806367d42a8b146101aa578063715018a6146101bf5780638da5cb5b146101c757600080fd5b80630f19734f146100ef578063209535e51461011557806333bf5cf214610128575b600080fd5b6101026100fd366004610e95565b610292565b6040519081526020015b60405180910390f35b610102610123366004610ee5565b6102b3565b610102610136366004610ee5565b6102c4565b61014e610149366004610ee5565b6102cf565b60405161010c9190815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301516001600160a01b03169082015260c09182015115159181019190915260e00190565b6101bd6101b8366004610ee5565b61038b565b005b6101bd610507565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161010c565b6101ff6101fa366004610efe565b61051b565b60405161010c9190610f20565b6101bd61021a366004610f63565b610587565b6101bd61022d366004610fd9565b6105fc565b6101bd610240366004610ee5565b61070b565b6101bd610253366004610efe565b610829565b6101d47f000000000000000000000000000000000000000000000000000000000000000081565b6101bd61028d3660046110e4565b610869565b600061029c6108d2565b6102a986868686866108ff565b9695505050505050565b60006102be82610c15565b92915050565b60006102be82610cf3565b61031a6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b50600090815260056020818152604092839020835160e0810185528154815260018201549281019290925260028101549382019390935260038301546060820152600483015460808201529101546001600160a01b03811660a0830152600160a01b900460ff16151560c082015290565b610393610d2c565b6000818152600560208190526040909120908101546001600160a01b031633148015906103cb57506000546001600160a01b03163314155b156103e95760405163644d871f60e01b815260040160405180910390fd5b60006103f483610c15565b60048301549091508082101561041d5760405163caccb6d960e01b815260040160405180910390fd5b6000610429828461113c565b90508060000361044c5760405163b10205ed60e01b815260040160405180910390fd5b610456818361114f565b84600401819055508060036000828254610470919061114f565b909155505060058401546104b1906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683610d56565b60058401546040518281526001600160a01b039091169086907f62eb4bd96d9a7a66875a9f46f9f9d8bf6cfed3fe0578671b752301427d2a4f669060200160405180910390a35050505061050460018055565b50565b61050f6108d2565b6105196000610da8565b565b6001600160a01b03811660009081526006602090815260409182902080548351818402810184019094528084526060939283018282801561057b57602002820191906000526020600020905b815481526020019060010190808311610567575b50505050509050919050565b61058f6108d2565b6105b56105a46000546001600160a01b031690565b6001600160a01b0384169083610d56565b816001600160a01b03167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695826040516105f091815260200190565b60405180910390a25050565b6106046108d2565b8887811415806106145750808614155b8061061f5750808414155b8061062a5750808214155b1561064857604051631b742d9d60e31b815260040160405180910390fd5b60005b818110156106fd576106f48c8c8381811061066857610668611162565b905060200201602081019061067d9190610efe565b8b8b8481811061068f5761068f611162565b905060200201358a8a858181106106a8576106a8611162565b905060200201358989868181106106c1576106c1611162565b905060200201358888878181106106da576106da611162565b90506020020160208101906106ef9190611178565b6108ff565b5060010161064b565b505050505050505050505050565b6107136108d2565b600081815260056020819052604090912090810154600160a01b900460ff1661074f57604051630e6a74e160e11b815260040160405180910390fd5b600061075a83610c15565b9050600081836000015461076e919061113c565b82845560058401805460ff60a01b1916905560028054919250829160009061079790849061113c565b90915550508015610823576107e86107b76000546001600160a01b031690565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083610d56565b837fd76e6ddeb66c11426afbadb0c7e5cb4ef26e8dfe8043b119d95879df37d9b8e88260405161081a91815260200190565b60405180910390a25b50505050565b6108316108d2565b6001600160a01b03811661086057604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61050481610da8565b60005b818110156108cd57600083838381811061088857610888611162565b905060200201359050600061089c82610c15565b600083815260056020526040902060040154909150808211156108c2576108c28361038b565b50505060010161086c565b505050565b6000546001600160a01b031633146105195760405163118cdaa760e01b8152336004820152602401610857565b60006001600160a01b0386161580610915575084155b8061091e575082155b1561093c57604051631b742d9d60e31b815260040160405180910390fd5b8284111561095d57604051630668575b60e01b815260040160405180910390fd5b600060035460025461096f919061113c565b6040516370a0823160e01b815230600482015290915060009082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156109db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff9190611193565b610a09919061113c565b905086811015610a2c57604051631e9acf1760e31b815260040160405180910390fd5b8660026000828254610a3e919061114f565b909155505060048054899142918a916000610a58836111ac565b9091555060405160609490941b6bffffffffffffffffffffffff191660208501526034840192909252605483015260748201526094016040516020818303038152906040528051906020012092506040518060e0016040528088815260200187815260200186815260200142815260200160008152602001896001600160a01b0316815260200185151581525060056000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160050160146101000a81548160ff02191690831515021790555090505060066000896001600160a01b03166001600160a01b03168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190915055876001600160a01b0316837ff4173b3b3302c4359c3dd6c9d18f24e03d01b04fb8edd7c3519df6ae162ad83989604051610c0291815260200190565b60405180910390a3505095945050505050565b6000818152600560208181526040808420815160e081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152909101546001600160a01b03811660a08301819052600160a01b90910460ff16151560c0830152610c925750600092915050565b6000816060015142610ca4919061113c565b90508160200151811015610cbc575060009392505050565b81604001518110610ccf57505192915050565b60408201518251610ce19083906111c5565b610ceb91906111dc565b949350505050565b600080610cff83610c15565b600084815260056020526040902060040154909150808211610d22576000610ceb565b610ceb818361113c565b600260015403610d4f57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526108cd908490610df8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080602060008451602086016000885af180610e1b576040513d6000823e3d81fd5b50506000513d91508115610e33578060011415610e40565b6001600160a01b0384163b155b1561082357604051635274afe760e01b81526001600160a01b0385166004820152602401610857565b80356001600160a01b0381168114610e8057600080fd5b919050565b80358015158114610e8057600080fd5b600080600080600060a08688031215610ead57600080fd5b610eb686610e69565b9450602086013593506040860135925060608601359150610ed960808701610e85565b90509295509295909350565b600060208284031215610ef757600080fd5b5035919050565b600060208284031215610f1057600080fd5b610f1982610e69565b9392505050565b602080825282518282018190526000918401906040840190835b81811015610f58578351835260209384019390920191600101610f3a565b509095945050505050565b60008060408385031215610f7657600080fd5b610f7f83610e69565b946020939093013593505050565b60008083601f840112610f9f57600080fd5b50813567ffffffffffffffff811115610fb757600080fd5b6020830191508360208260051b8501011115610fd257600080fd5b9250929050565b60008060008060008060008060008060a08b8d031215610ff857600080fd5b8a3567ffffffffffffffff81111561100f57600080fd5b61101b8d828e01610f8d565b909b5099505060208b013567ffffffffffffffff81111561103b57600080fd5b6110478d828e01610f8d565b90995097505060408b013567ffffffffffffffff81111561106757600080fd5b6110738d828e01610f8d565b90975095505060608b013567ffffffffffffffff81111561109357600080fd5b61109f8d828e01610f8d565b90955093505060808b013567ffffffffffffffff8111156110bf57600080fd5b6110cb8d828e01610f8d565b915080935050809150509295989b9194979a5092959850565b600080602083850312156110f757600080fd5b823567ffffffffffffffff81111561110e57600080fd5b61111a85828601610f8d565b90969095509350505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102be576102be611126565b808201808211156102be576102be611126565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561118a57600080fd5b610f1982610e85565b6000602082840312156111a557600080fd5b5051919050565b6000600182016111be576111be611126565b5060010190565b80820281158282048414176102be576102be611126565b6000826111f957634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212209279cf592c5de8e569c5a4923ba42afc366e8aa4987a42d8cae023c37e18c11b64736f6c634300081c0033",
  "devdoc": {
    "author": "MerkleX",
    "details": "Uses OpenZeppelin’s Ownable and ReentrancyGuard.       Schedules are created with a cliff period, total duration, linear vesting, and optional revocability.      Beneficiaries can claim vested tokens, and owner can revoke unvested portions if allowed.",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "batchCreateSchedules(address[],uint256[],uint256[],uint256[],bool[])": {
        "details": "Batch create multiple vesting schedules (gas efficient)"
      },
      "batchRelease(bytes32[])": {
        "details": "Batch release for multiple schedules"
      },
      "createVestingSchedule(address,uint256,uint256,uint256,bool)": {
        "details": "Creates a new vesting schedule",
        "params": {
          "beneficiary": "Address of the beneficiary",
          "cliffDuration": "Cliff period in seconds",
          "revocable": "Whether the schedule can be revoked",
          "totalAmount": "Total amount to be vested",
          "vestingDuration": "Total vesting duration in seconds"
        }
      },
      "emergencyWithdraw(address,uint256)": {
        "details": "Emergency function to recover accidentally sent tokens"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "release(bytes32)": {
        "details": "Release vested tokens for a specific schedule"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "revoke(bytes32)": {
        "details": "Revoke a vesting schedule (if revocable)"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Barin Vesting Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Manages multiple vesting schedules for BARIN token allocations across team, marketing, liquidity, and other categories.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/BarinVesting.sol:BarinVesting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1833,
        "contract": "contracts/BarinVesting.sol:BarinVesting",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7909,
        "contract": "contracts/BarinVesting.sol:BarinVesting",
        "label": "_totalAllocated",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7911,
        "contract": "contracts/BarinVesting.sol:BarinVesting",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7913,
        "contract": "contracts/BarinVesting.sol:BarinVesting",
        "label": "_nonce",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7918,
        "contract": "contracts/BarinVesting.sol:BarinVesting",
        "label": "_schedules",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)7904_storage)"
      },
      {
        "astId": 7923,
        "contract": "contracts/BarinVesting.sol:BarinVesting",
        "label": "_beneficiarySchedules",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(VestingSchedule)7904_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BarinVesting.VestingSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingSchedule)7904_storage"
      },
      "t_struct(VestingSchedule)7904_storage": {
        "encoding": "inplace",
        "label": "struct BarinVesting.VestingSchedule",
        "members": [
          {
            "astId": 7891,
            "contract": "contracts/BarinVesting.sol:BarinVesting",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7893,
            "contract": "contracts/BarinVesting.sol:BarinVesting",
            "label": "cliffDuration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7895,
            "contract": "contracts/BarinVesting.sol:BarinVesting",
            "label": "vestingDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7897,
            "contract": "contracts/BarinVesting.sol:BarinVesting",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7899,
            "contract": "contracts/BarinVesting.sol:BarinVesting",
            "label": "withdrawnAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7901,
            "contract": "contracts/BarinVesting.sol:BarinVesting",
            "label": "beneficiary",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 7903,
            "contract": "contracts/BarinVesting.sol:BarinVesting",
            "label": "revocable",
            "offset": 20,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}